import { type RefObject } from 'react';
import { type MRT_RowData, type MRT_Cell, type MRT_TableInstance, type MRT_VirtualItem, type MRT_CellValue } from '../types';
interface Props<TData extends MRT_RowData, TValue = MRT_CellValue> {
    cell: MRT_Cell<TData, TValue>;
    isStriped?: boolean | 'odd' | 'even';
    measureElement?: (element: HTMLTableCellElement) => void;
    numRows?: number;
    rowIndex: number;
    rowRef: RefObject<HTMLTableRowElement>;
    table: MRT_TableInstance<TData>;
    virtualCell?: MRT_VirtualItem;
}
export declare const MRT_TableBodyCell: <TData extends MRT_RowData>({ cell, isStriped, measureElement, numRows, rowIndex, rowRef, table, virtualCell, }: Props<TData, unknown>) => import("react/jsx-runtime").JSX.Element;
export declare const Memo_MRT_TableBodyCell: <TData extends MRT_RowData>({ cell, isStriped, measureElement, numRows, rowIndex, rowRef, table, virtualCell, }: Props<TData, unknown>) => import("react/jsx-runtime").JSX.Element;
export {};
