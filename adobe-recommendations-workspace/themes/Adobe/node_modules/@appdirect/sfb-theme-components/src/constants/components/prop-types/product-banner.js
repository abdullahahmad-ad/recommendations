import PropTypes from 'prop-types';

import { SIZE_OPTIONS, TEXT_COLOR_OPTIONS } from '../schemas/product-banner';
import { IMAGE_UPLOADER } from '../../schemaComponentTypes';
import { summaryPropTypes } from '../../prop-types/application/summary';
import { relatedContentPropTypes } from '../../prop-types/application/related-content';
import { editionPropTypes } from '../../prop-types/application/editions';
import { callToActionsShape } from '../../atoms/prop-types/buttons-list';
import { addonShape } from './addon';

export const productBannerPropTypes = {
    settings: PropTypes.shape({
        backgroundType: PropTypes.oneOfType([
            PropTypes.string,
            PropTypes.object
        ]),
        bannerBackgroundColor: PropTypes.string,
        textColor: PropTypes.oneOf(TEXT_COLOR_OPTIONS.map(({ value }) => value)),
        backgroundImg: PropTypes.shape({
            filename: PropTypes.string,
            type: PropTypes.oneOf([IMAGE_UPLOADER]),
            url: PropTypes.string
        }),
        showRatings: PropTypes.bool,
        settingsHeight: PropTypes.string,
        productNameSize: PropTypes.oneOf(SIZE_OPTIONS.map(({ value }) => value)),
        descTextSize: PropTypes.oneOf(SIZE_OPTIONS.map(({ value }) => value))
    }),
    data: PropTypes.shape({
        summary: PropTypes.shape(summaryPropTypes),
        categories: PropTypes.shape({
            label: PropTypes.string,
            items: PropTypes.arrayOf(
                PropTypes.shape({
                    label: PropTypes.string,
                    href: PropTypes.string
                })
            )
        }),
        applicationType: PropTypes.string,
        listingPageUrl: PropTypes.string,
        callToActions: PropTypes.shape(callToActionsShape),
        config: PropTypes.object,
        configurator: PropTypes.shape({
            url: PropTypes.string
        }),
        relatedContent: PropTypes.shape(relatedContentPropTypes),
        i18n: PropTypes.shape({
            backToResults: PropTypes.string,
            allProducts: PropTypes.string,
            cart: PropTypes.shape({
                addedToCart: PropTypes.string
            })
        }),
        defaultSelectedEdition: PropTypes.shape(editionPropTypes),
        locale: PropTypes.string,
        editions: PropTypes.shape({
            items: PropTypes.arrayOf(PropTypes.shape(editionPropTypes))
        }),
        addonProducts: addonShape
    })
};
