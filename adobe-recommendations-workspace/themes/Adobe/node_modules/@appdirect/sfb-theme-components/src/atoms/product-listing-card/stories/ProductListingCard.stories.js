import React from 'react';
import ProductListingCard from '../ProductListingCard';
import { productMockWithHTML, productMockWithLongDescription } from '../../../../mocks/product/productListing';
import { listingProductsMock,
    singleProductListingDataMock as productListingData,
    singleProductMockListingDataMockWithoutIcon } from '../../../../mocks/listingProducts';
import { getArgTypes, getArgs } from '../../../tools/controlsHelper';

const getMergedArgTypes = () => {
    const argTypes = getArgTypes(ProductListingCard.schema().form);

    const descriptionMap = {
        iconSize: 'Controls the size of icons in the standard card view',
        iconSizeGrid: 'Controls the size of icons in the grid card view',
        titleColor: 'Defines the text color for the product title',
        headerBackgroundColor: 'Sets the background color for the card header section',
        backgroundColor: 'Defines the main background color for the entire card',
        borderColor: 'Sets the color of the card border',
        hoverColor: 'Defines the background color when hovering over the card',
        borderRadius: 'Controls the roundness of the card corners (in pixels)',
        isCompareVisible: 'Toggles visibility of the product comparison feature',
        isRatingsVisible: 'Toggles visibility of product ratings',
        isVendorVisible: 'Toggles visibility of the vendor information',
        isBlurbVisible: 'Toggles visibility of the short product description',
        isOverviewVisible: 'Toggles visibility of the product overview section'
    };

    Object.keys(argTypes).forEach(argType => {
        argTypes[argType].description = descriptionMap[argType];
    });

    return argTypes;
};

export default {
    title: 'Atoms/ProductListingCard',
    component: ProductListingCard,
    argTypes: getMergedArgTypes(),
    parameters: {
        controls: {
            include: Object.keys(getMergedArgTypes())
        }
    }
};

const exclusions = (argsToExclude = []) => ({
    parameters: {
        controls: {
            exclude: ['defaultView', ...argsToExclude]
        }
    }
});

export const ListMode = {
    render: args => (
        <ProductListingCard data={productListingData} settings={args} />
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSizeGrid'])
};

export const GridMode = {
    render: args => (
        <div style={{ width: 400 }}>
            <ProductListingCard
                data={productListingData}
                settings={args}
                showAsGrid
            />
        </div>
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSize'])
};

export const WithLongOverview = {
    render: args => (
        <ProductListingCard
            data={productMockWithLongDescription}
            settings={args}
        />
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSizeGrid'])
};

export const WithHtmlInTheOverview = {
    render: args => (
        <ProductListingCard data={productMockWithHTML} settings={args} />
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSizeGrid'])
};

export const WithBadges = {
    render: args => (
        <ProductListingCard data={listingProductsMock.items[2]} settings={args} />
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSizeGrid'])
};

export const WithPlaceholderImage = {
    render: args => (
        <ProductListingCard
            data={singleProductMockListingDataMockWithoutIcon}
            settings={args}
        />
    ),
    args: getArgs(ProductListingCard.schema().form),
    ...exclusions(['iconSizeGrid'])
};
