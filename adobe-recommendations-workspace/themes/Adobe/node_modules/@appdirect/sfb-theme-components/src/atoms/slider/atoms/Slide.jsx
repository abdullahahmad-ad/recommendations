import React, { useRef } from 'react';
import PropTypes from 'prop-types';

import { i18nSliderShape } from '../../../constants/components/prop-types/slider';
import { i18nMock } from '../../../../mocks/productLists/i18n';

import { createNamespace } from '../../../tools/namingTools';
import { useCarouselA11yVisible } from '../../../tools/a11y/useCarouselA11yVisible';
import { replacePlaceholders } from '../../../tools/stringTools';

import Tile from '../../tile/Tile';
import Button from '../../button/Button';

const n = createNamespace('Slider');

const Slide = ({
    index,
    item,
    tileSettings,
    columns,
    onQuickView,
    hasQuickView,
    isSlider,
    isMobile,
    tileCtaLabel,
    i18n: i18nProp,
    layout,
    insideActiveRange,
    imageAttributes,
    serviceFailure
}) => {
    const i18n = {
        ...Slide.defaultProps.i18n,
        ...i18nProp
    };

    const slideRef = useRef();

    // When slider is static all slides should be visible
    const slideNodeRef = isSlider ? slideRef : null;

    const [, tabIndex] = useCarouselA11yVisible(slideNodeRef, insideActiveRange);

    const staticModifier = isSlider ? 'slider' : 'static';
    const modifiers = [layout, staticModifier, isMobile && 'mobile'];

    const slideModifiers = [
        ...modifiers,
        `${columns}cols`
    ];

    const { name } = item;

    return (
        <div {...n('slide', slideModifiers).withTestId().withE2EId().props} ref={slideRef}>
            <div {...n('content', modifiers).withE2EId().props}>
                <Tile
                    onDragStart={e => e.preventDefault()}
                    data={item}
                    settings={tileSettings}
                    tileIndex={index}
                    isMobile={isMobile}
                    ctaLabel={tileCtaLabel}
                    i18n={i18n}
                    tabIndex={tabIndex}
                    imageAttributes={imageAttributes}
                    serviceFailure={serviceFailure}
                />
                {hasQuickView && (
                    <div {...n('quickviewButton').withTestId().withE2EId().props}>
                        <Button
                            type="primary"
                            onClick={e => onQuickView(e, item.id)}
                            size="small"
                            tabIndex={tabIndex}
                            aria-label={replacePlaceholders(i18n.openProductQuickview, { productName: name })}
                        >
                            {i18n.quickview}
                        </Button>
                    </div>
                )}
            </div>
        </div>
    );
};

Slide.propTypes = {
    index: PropTypes.number.isRequired,
    item: PropTypes.object.isRequired,
    tileSettings: PropTypes.object.isRequired,
    columns: PropTypes.number.isRequired,
    hasQuickView: PropTypes.bool,
    onQuickView: PropTypes.func,
    tileCtaLabel: PropTypes.string.isRequired,
    isSlider: PropTypes.bool.isRequired,
    isMobile: PropTypes.bool.isRequired,
    layout: PropTypes.string.isRequired,
    i18n: PropTypes.shape(i18nSliderShape),
    insideActiveRange: PropTypes.bool,
    imageAttributes: PropTypes.object,
    serviceFailure: PropTypes.bool
};

Slide.defaultProps = {
    hasQuickView: false,
    i18n: i18nMock,
    onQuickView: null,
    insideActiveRange: true,
    imageAttributes: {},
    serviceFailure: false
};

export default Slide;
