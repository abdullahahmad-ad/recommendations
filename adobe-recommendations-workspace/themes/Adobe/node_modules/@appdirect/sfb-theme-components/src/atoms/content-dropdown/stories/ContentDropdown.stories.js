import React from 'react';
import PropTypes from 'prop-types';
import ContentDropdown from '../ContentDropdown';

const ContentTemplate = ({ content }) => (
    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'baseline' }}>
        <div>
            <h2 style={{ margin: '0 0 8px 0' }}>{content}</h2>
            <p style={{ margin: 0, fontWeight: 'lighter' }}>Other details</p>
        </div>
        <div>
            <h3 style={{ margin: 0 }}>Starting at $999.99</h3>
        </div>
    </div>
);

ContentTemplate.propTypes = {
    content: PropTypes.node.isRequired
};

const items = [
    {
        id: 'item-1',
        content: <ContentTemplate content="iPhone 13 mini" />
    },
    {
        id: 'item-2',
        content: <ContentTemplate content="iPhone 13" />
    },
    {
        id: 'item-3',
        content: <ContentTemplate content="iPhone 13 plus ultra" />
    }
];

export default {
    title: 'Atoms (Preview)/ContentDropdown',
    component: ContentDropdown
};

export const Default = {
    render: () => <ContentDropdown label="Dropdown label" items={items} />,
    name: 'Default'
};

export const WithSelectedItem = {
    render: () => <ContentDropdown label="Dropdown label" items={items} selectedItemId="item-2" />,
    name: 'With selected item'
};

export const WithDisabledItems = {
    render: () => (
        <ContentDropdown
            label="Dropdown label"
            items={items.map(item => ({
                ...item,
                isDisabled: true
            }))}
        />
    ),

    name: 'With disabled items'
};

export const WithSelectedContentOverride = {
    render: () => (
        <ContentDropdown
            label="Dropdown label"
            items={items}
            selectedItemId="item-2"
            selectedItemContentOverride={(
                <h2
                    style={{
                        margin: 0
                    }}
                >
                    iPhone 13
                </h2>
            )}
        />
    ),

    name: 'With selected content override'
};

export const WithInitiallyOpenSetToFalse = {
    render: () => (
        <ContentDropdown label="Dropdown label" items={items} selectedItemId="item-2" initiallyOpen={false} />
    ),

    name: 'With initiallyOpen set to false'
};

export const WithNonNodeValues = {
    render: () => (
        <ContentDropdown
            label="Dropdown label"
            items={[
                {
                    id: '1',
                    content: 123
                },
                {
                    id: '2',
                    content: 'A string'
                },
                {
                    id: '3',
                    content: undefined
                },
                {
                    id: '3',
                    content: null
                }
            ]}
        />
    ),

    name: 'With non node values'
};
