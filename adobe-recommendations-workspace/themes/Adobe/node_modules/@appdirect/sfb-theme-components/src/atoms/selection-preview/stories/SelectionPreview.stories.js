import React from 'react';
import SelectionPreview from '../SelectionPreview';
import { selectedEditionsMock } from '../../../../mocks/product/configuratorSelectedEdition';
import { selectedAddonsMock,
    selectedAddonsMultiButtonMock } from '../../../../mocks/product/configuratorSelectedAddons';
import { productCardMock } from '../../../../mocks/product/productCard';

export default {
    title: 'Atoms/Selection Preview',
    component: SelectionPreview
};

export const WithOnlySelectedEdition = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedEditionsMock.configurator,
                selectedEdition: selectedEditionsMock.configurator.selectedEdition,
                callToActions: selectedEditionsMock.callToActions
            }}
        />
    ),

    name: 'With only selected edition'
};

export const WithSelectedAddons = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedAddonsMock.configurator,
                selectedEdition: selectedAddonsMock.configurator.selectedEdition,
                selectedAddons: selectedAddonsMock.configurator.selectedAddons,
                callToActions: selectedAddonsMock.callToActions
            }}
        />
    ),

    name: 'With selected addons'
};

export const WithImage = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedAddonsMock.configurator,
                selectedEdition: selectedAddonsMock.configurator.selectedEdition,
                callToActions: selectedAddonsMock.callToActions,
                productImgSrc: productCardMock.logoSrc
            }}
        />
    ),

    name: 'With image'
};

export const WithMultipleButtons = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedAddonsMock.configurator,
                selectedEdition: selectedAddonsMock.configurator.selectedEdition,
                selectedAddons: selectedAddonsMock.configurator.selectedAddons,
                callToActions: selectedAddonsMultiButtonMock.callToActions
            }}
            manageAppActionHandler={() => selectedAddonsMultiButtonMock.callToActions}
        />
    ),

    name: 'With multiple buttons'
};

export const Condensed = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedAddonsMock.configurator,
                selectedEdition: selectedAddonsMock.configurator.selectedEdition,
                selectedAddons: selectedAddonsMock.configurator.selectedAddons,
                callToActions: selectedAddonsMultiButtonMock.callToActions
            }}
            isCondensed
            manageAppActionHandler={() => selectedAddonsMultiButtonMock.callToActions}
        />
    ),

    name: 'Condensed'
};

export const Fullscreen = {
    render: () => (
        <SelectionPreview
            data={{
                configurator: selectedAddonsMock.configurator,
                selectedEdition: selectedAddonsMock.configurator.selectedEdition,
                selectedAddons: selectedAddonsMock.configurator.selectedAddons,
                callToActions: selectedAddonsMultiButtonMock.callToActions
            }}
            isFullscreen
            manageAppActionHandler={() => selectedAddonsMultiButtonMock.callToActions}
        />
    ),

    name: 'Fullscreen',
    height: '500px',
    inline: false
};
