import { FOCUSABLE_SELECTORS as focusableSelectors } from '../constants/accessibility';

export const getFocusableChildren = root => {
    if (!root) {
        return null;
    }

    const elements = [...root.querySelectorAll(focusableSelectors.join(','))];

    return elements.filter(element => element.offsetWidth || element.offsetHeight || element.getClientRects().length);
};

export const trapTabKey = (elementRef, event) => {
    if (elementRef && elementRef.current) {
        const focusableChildren = getFocusableChildren(elementRef.current);
        const focusedItemIndex = focusableChildren.indexOf(document.activeElement);
        const lastIndex = focusableChildren.length - 1;
        const withShift = event.shiftKey;

        if (withShift && focusedItemIndex === 0) {
            focusableChildren[lastIndex].focus();
            event.preventDefault();
        } else if (!withShift && focusedItemIndex === lastIndex) {
            focusableChildren[0].focus();
            event.preventDefault();
        }
    }
};

export const moveFocusIn = elementRef => {
    if (elementRef && elementRef.current) {
        const target = elementRef.current.querySelector('[autofocus]') || getFocusableChildren(elementRef.current)[0];

        if (target) {
            target.focus();
        }
    }
};
