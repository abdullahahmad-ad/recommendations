import { useEffect, useState, useCallback } from 'react';

export const DIRECTION_TOP = 'top';
export const DIRECTION_BOTTOM = 'bottom';

export const getPageCoordinates = direction => ({
    top: direction === DIRECTION_BOTTOM ? document.body.scrollHeight : 0,
    left: 0
});

export const getScrollOptions = (top = 0, left = 0, animate = true) => ({
    top,
    left,
    behavior: animate ? 'smooth' : 'auto'
});

function scrollTo({ top = 0, left = 0 }, animate = true) {
    window.scroll(getScrollOptions(top, left, animate));
}

function scrollToAccessible({ top = 0, left = 0 }, animate = true) {
    window.scroll(getScrollOptions(top, left, animate));

    // get the topmost focusable element in Header
    const firstFocusable = document.querySelectorAll(`#Header [href], #Header button
        #Header input, #Header select, #Header textarea`)?.[0];
    firstFocusable?.focus();
}

export function scrollToTop(animate = true) {
    scrollTo(getPageCoordinates(DIRECTION_TOP), animate);
}

export function scrollToTopAccessible(animate = true) {
    scrollToAccessible(getPageCoordinates(DIRECTION_TOP), animate);
}

export function scrollToBottom(animate = true) {
    scrollTo(getPageCoordinates(DIRECTION_BOTTOM), animate);
}

/**
 Custom hook thaat sets a boolean if user has scrolled passed window height
*/
export const useIsScrolledPassedWindowHeight = () => {
    const [isScrolledDown, setIsScrolledDown] = useState(false);

    const onScroll = useCallback(() => {
        setIsScrolledDown(window.scrollY > window.innerHeight);
    }, []);

    useEffect(() => {
        onScroll();
        window.addEventListener('scroll', onScroll);

        return () => {
            window.removeEventListener('scroll', onScroll);
        };
    }, [onScroll]);

    return isScrolledDown;
};
