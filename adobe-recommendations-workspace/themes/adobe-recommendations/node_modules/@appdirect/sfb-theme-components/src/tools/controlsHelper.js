import { INPUT, TOGGLE, TOGGLE_CHECK, TEXTAREA, COLORPICKER, DROPDOWN, RADIO,
    CHECKBOX, SLIDER, IMAGE_UPLOADER, MENU, DRAWER_LIST } from '../constants/schemaComponentTypes';

const parseLocalizedKey = (key = '') => {
    if (key && key.includes('uieditor.sfbComponent')) {
        const keyArray = key.split('.');

        if (keyArray && keyArray.length) {
            return keyArray[keyArray.length - 2];
        }
    }

    return key;
};

/**
 * Converts a setting to a Controls argType configuration
 * @param {Object} setting - The setting object from the form schema
 * @param {string} settingKey - The key of the setting
 * @param {Array} controlNames - Array of control names to avoid duplicates
 * @returns {Object} The argType configuration for the setting
 */
const settingToArgType = ({ title, type, labelOn, label, options }, settingKey, controlNames) => {
    let titleParsed = parseLocalizedKey(title) || title;
    if (controlNames.includes(titleParsed)) {
        titleParsed += ` (${settingKey})`;
    }
    controlNames.push(titleParsed);
    const baseArgType = {
        name: titleParsed
    };

    switch (type) {
        case INPUT:
        case TEXTAREA:
            return {
                ...baseArgType,
                control: 'text'
            };
        case TOGGLE:
            return {
                ...baseArgType,
                name: parseLocalizedKey(labelOn),
                control: 'boolean',
                description: parseLocalizedKey(labelOn)
            };
        case TOGGLE_CHECK:
            return {
                ...baseArgType,
                name: parseLocalizedKey(label),
                control: 'boolean',
                description: parseLocalizedKey(label)
            };
        case COLORPICKER:
            return {
                ...baseArgType,
                control: { type: 'color' }
            };
        case DROPDOWN:
            return {
                ...baseArgType,
                control: 'select',
                options: options.map(({ value }) => value)
            };
        case RADIO:
            return {
                ...baseArgType,
                control: 'radio',
                options: options.map(({ value }) => value)
            };
        case CHECKBOX: {
            return {
                ...baseArgType,
                control: {
                    type: 'check',
                    options: options.map(({ value }) => value)
                }
            };
        }
        case SLIDER:
            return {
                ...baseArgType,
                control: {
                    type: 'range',
                    min: options?.min || 0,
                    max: options?.max || 100,
                    step: options?.step || 1
                }
            };
        case IMAGE_UPLOADER:
        case MENU:
        case DRAWER_LIST:
            return {
                ...baseArgType,
                control: 'object'
            };
        default:
            return undefined;
    }
};

/**
 * Generates argTypes configuration from a form schema
 * @param {Object} form - The form schema
 * @returns {Object} The argTypes configuration for Storybook Controls
 */
export const getArgTypes = (form = {}) => {
    const argTypes = {};
    const controlNames = [];

    Object.keys(form).forEach(settingKey => {
        const argType = settingToArgType(form[settingKey], settingKey, controlNames);
        if (argType) {
            argTypes[settingKey] = argType;
        }
    });
    return argTypes;
};

/**
 * Generates args (initial values) from a form schema
 * @param {Object} form - The form schema
 * @returns {Object} The args with initial values for Storybook Controls
 */
export const getArgs = (form = {}) => {
    const args = {};

    Object.keys(form).forEach(settingKey => {
        const { defaultValue } = form[settingKey];
        if (defaultValue !== undefined) {
            const value = typeof defaultValue === 'string' ? (parseLocalizedKey(defaultValue) || defaultValue) : defaultValue;
            args[settingKey] = value;
        }
    });
    return args;
};
