import { isAppStackable } from './application';
import { canReplaceEdition } from './callToActions';

/**
 * Get editions of a given product in the cart
 *
 * @param {*} productUuid
 * @param {*} cart
 * @returns {Array} edition pricing plan id (epp id) of each edition found
 *   e.g. ["7502c355-00d2-4f3c-83bb-aab503edf08b"]
 */
export const getProductEditionsInCart = (productUuid, cart) => {
    if (!productUuid || !cart?.items?.length) {
        return {};
    }

    const productEditionsInCart = cart?.items?.reduce((acc, cartItem) => {
        if (cartItem?.itemDetails?.uuid === productUuid && cartItem?.pricingPlanId) {
            acc[cartItem?.pricingPlanId] = cartItem;
        }
        return acc;
    }, {});

    return productEditionsInCart || {};
};

/**
 * Get editions of a given product in the cart
 * and editions that can replace current item in cart, for non-stackable products
 *
 * @param {*} editions
 * @param {*} cart
 * @param {*} productUuid
 * @param {*} isNonStackableProduct
 * @param {*} hasAddons
 * @returns {Object} { editionsInCart: { eppid1: cartItemId1 }, editionsReplace: [ eppid2, eppid3 ] }
 *  e.g. {
 *      editionsInCart: {"7502c355-00d2-4f3c-83bb-aab503edf08b": "7b367b42-747f-4098-bbb2-4826820d1dc4"}
 *      editionsReplace: ['23945eae-40fe-4140-ac71-3f8fd575b10c', 'f2dcc6a4-56e9-45da-bc29-da8189ed040a']
 *  }
 *
 */
export const getProductEditionsByCartStatus = (
    editions = [],
    cart = {},
    productUuid,
    isNonStackableProduct,
    hasAddons
) => {
    const editionsInCart = {};
    const editionsReplace = [];

    const productEditionsInCart = getProductEditionsInCart(productUuid, cart);
    if (Object.keys(productEditionsInCart).length && editions?.length) {
        editions.forEach(edition => {
            const editionUuid = edition?.plans?.[0]?.uuid; // matches eppid in cta and in cart
            const editionInCart = productEditionsInCart?.[editionUuid];
            const isReplaceEditionInCart = !editionInCart
                && canReplaceEdition(edition?.callToAction, isNonStackableProduct, hasAddons);

            if (editionInCart) {
                // eppid: cartItemId
                editionsInCart[editionUuid] = editionInCart?.id;
            }

            if (isReplaceEditionInCart) {
                editionsReplace.push(editionUuid);
            }
        });
    }

    return {
        editionsInCart,
        editionsReplace
    };
};

export const isProductEditionAddedToCart = (editions = [], cart = {}, productUuid, applicationType, addonProducts) => {
    const nonStackableProduct = !isAppStackable(applicationType);
    const hasAddons = !!addonProducts?.items?.length;

    const {
        editionsInCart
    } = getProductEditionsByCartStatus(editions, cart, productUuid, nonStackableProduct, hasAddons);

    return !!(nonStackableProduct && Object.keys(editionsInCart).length);
};
