import PropTypes from 'prop-types';
import { TYPE_PHONE, TYPE_EMAIL, TYPE_TEXT, TYPE_TEXTAREA, TYPE_SELECT, TYPE_STYLED_SELECT, TYPE_CHECKBOX } from '../../../components/lead-form';

const defaultInputShape = {
    title: PropTypes.string,
    name: PropTypes.string,
    type: PropTypes.oneOf([
        TYPE_TEXT,
        TYPE_EMAIL,
        TYPE_PHONE,
        TYPE_TEXTAREA,
        TYPE_SELECT,
        TYPE_STYLED_SELECT,
        TYPE_CHECKBOX
    ])
};

const provinceShape = PropTypes.shape({
    ...defaultInputShape,
    isRequired: PropTypes.bool,
    inline: PropTypes.bool,
    includeEmptyOption: PropTypes.bool,
    emptyOptionLabel: PropTypes.string,
    toggledBy: PropTypes.string,
    visibleOn: PropTypes.string,
    options: PropTypes.arrayOf(
        PropTypes.shape({
            label: PropTypes.string,
            value: PropTypes.string
        })
    ),
    validators: PropTypes.arrayOf(
        PropTypes.oneOfType([
            PropTypes.shape({
                type: PropTypes.string,
                conditionalField: PropTypes.string,
                requiredWhen: PropTypes.string
            }),
            PropTypes.string
        ])
    )
});

const leadFormShape = {
    actionEndpoint: PropTypes.string,
    productUrl: PropTypes.string,
    otherData: PropTypes.shape({
        profileProduct: PropTypes.shape({
            id: PropTypes.string,
            name: PropTypes.string
        }),
        partner: PropTypes.string,
        leadType: PropTypes.string
    }),
    userAndCompanyInfo: PropTypes.shape({
        firstName: PropTypes.string,
        lastName: PropTypes.string,
        email: PropTypes.string,
        companyName: PropTypes.string,
        city: PropTypes.string,
        street1: PropTypes.string,
        street2: PropTypes.string,
        zip: PropTypes.string
    }),
    schema: PropTypes.shape({
        firstName: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            })
        }),
        lastName: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            })
        }),
        email: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            })
        }),
        phone: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            countryCodeValidationField: PropTypes.string
        }),
        phoneExtension: PropTypes.shape({
            ...defaultInputShape
        }),
        companyName: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            }),
            inline: PropTypes.bool
        }),
        companySize: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            includeEmptyOptions: PropTypes.bool,
            inline: PropTypes.bool,
            options: PropTypes.arrayOf(
                PropTypes.shape({
                    label: PropTypes.string,
                    value: PropTypes.string
                })
            )
        }),
        street1: PropTypes.shape(
            Object.assign(defaultInputShape, {
                isRequired: PropTypes.bool,
                validators: PropTypes.arrayOf(PropTypes.string),
                editorAttrs: PropTypes.shape({
                    maxlength: PropTypes.number
                }),
                inline: PropTypes.bool
            })
        ),
        street2: PropTypes.shape({
            ...defaultInputShape,
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            }),
            inline: PropTypes.bool
        }),
        city: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number
            }),
            inline: PropTypes.bool
        }),
        state: provinceShape,
        province: provinceShape,
        zip: PropTypes.shape({
            ...defaultInputShape,
            isRequired: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            inline: PropTypes.bool
        }),
        country: PropTypes.shape({
            ...defaultInputShape,
            includeEmptyOption: PropTypes.bool,
            isRequired: PropTypes.bool,
            iso3: PropTypes.bool,
            validators: PropTypes.arrayOf(PropTypes.string),
            options: PropTypes.arrayOf(
                PropTypes.shape({
                    isSelected: PropTypes.bool,
                    label: PropTypes.string,
                    phoneCode: PropTypes.string,
                    value: PropTypes.string,
                    value_iso3: PropTypes.string
                })
            )
        }),
        notes: PropTypes.shape({
            ...defaultInputShape,
            editorAttrs: PropTypes.shape({
                maxlength: PropTypes.number,
                placeholder: PropTypes.string
            })
        }),
        custom: PropTypes.arrayOf(
            PropTypes.shape({
                ...defaultInputShape,
                hint: PropTypes.string,
                isRequired: PropTypes.bool,
                options: PropTypes.arrayOf(
                    PropTypes.shape({
                        label: PropTypes.string,
                        value: PropTypes.string
                    })
                ),
                validators: PropTypes.arrayOf(PropTypes.string)
            })
        )
    })
};

const i18nLeadShape = {
    title: PropTypes.string,
    contact: PropTypes.string,
    cancel: PropTypes.string,
    submit: PropTypes.string,
    defaultError: PropTypes.string,
    select: PropTypes.string,
    fieldRequired: PropTypes.string,
    errorMessage: PropTypes.string,
    sucessMessage: PropTypes.string,
    phoneExtension: PropTypes.string,
    countryCode: PropTypes.string,
    required: PropTypes.string,
    closeLeadForm: PropTypes.string,
    closeAlert: PropTypes.string
};

export const leadsPropTypes = {
    form: PropTypes.shape(leadFormShape),
    button: PropTypes.shape({
        label: PropTypes.string
    }),
    collectLeads: PropTypes.bool,
    i18n: PropTypes.shape(i18nLeadShape)
};
