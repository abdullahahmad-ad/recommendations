import PropTypes from 'prop-types';
import { configuratorPropTypes } from '../../prop-types/application/configurator';
import { defaultEditionsProps } from '../../../atoms/product-edition/list/ProductEditionList';
import { callToActionListShape } from '../../prop-types/application/call-to-actions';

const variantOptionValueShape = PropTypes.shape({
    code: PropTypes.string,
    name: PropTypes.string,
    hexcode: PropTypes.string,
    isDefaultValue: PropTypes.bool,
    secondaryInformation: PropTypes.string,
    isDisabled: PropTypes.bool
});

export const variantOptionShape = PropTypes.shape({
    code: PropTypes.string,
    name: PropTypes.string,
    inputType: PropTypes.string,
    values: PropTypes.arrayOf(variantOptionValueShape),
    defaultValue: variantOptionValueShape
});

const srcSetShape = PropTypes.shape({
    default: PropTypes.string,
    '1x': PropTypes.string,
    '2x': PropTypes.string
});

export const variantImageShape = {
    name: PropTypes.string,
    imageUrl: PropTypes.string,
    imageUrlSrcset: srcSetShape
};

export const productVariantsAdapterShape = {
    data: PropTypes.shape({
        adTenant: PropTypes.string,
        baseUrl: PropTypes.string,
        callToActions: callToActionListShape,
        configurator: configuratorPropTypes,
        editions: defaultEditionsProps,
        summary: PropTypes.shape({
            details: PropTypes.string,
            logoSrc: PropTypes.string,
            logoSrcset: srcSetShape,
            logoAlt: PropTypes.string,
            overview: PropTypes.string,
            title: PropTypes.string
        })
    })
};

export const variantShape = PropTypes.shape({
    id: PropTypes.string,
    version: PropTypes.string,
    editionId: PropTypes.string,
    configuration: PropTypes.arrayOf(PropTypes.shape({
        optionCode: PropTypes.string,
        valueCode: PropTypes.string
    })),
    price: PropTypes.string,
    image: PropTypes.arrayOf(PropTypes.shape(variantImageShape)),
    isEnabled: PropTypes.bool
});

export const productVariantsShape = {
    data: PropTypes.shape({
        isLoadingVariantsData: PropTypes.bool,
        hasErrorsLoadingVariantsData: PropTypes.shape({}),
        variantOptions: PropTypes.arrayOf(variantOptionShape),
        variants: PropTypes.arrayOf(variantShape),
        adTenant: PropTypes.string,
        baseUrl: PropTypes.string,
        callToActions: callToActionListShape,
        configurator: configuratorPropTypes,
        editions: defaultEditionsProps,
        summary: PropTypes.shape({
            details: PropTypes.string,
            logoSrc: PropTypes.string,
            logoSrcset: srcSetShape,
            logoAlt: PropTypes.string,
            overview: PropTypes.string,
            title: PropTypes.string
        })
    })
};
