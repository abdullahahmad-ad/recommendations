import React from 'react';
import { LAYOUT_HORIZONTAL,
    LAYOUT_VERTICAL,
    LAYOUT_TITLES,
    LAYOUT_CARETS } from '../../../constants/components/product-image-viewer';
import { defaultMock,
    youtubeDemoMock,
    vimeoDemoMock,
    zoomDemoMock,
    youtubeDemoWithoutScreenshotsMock,
    tallImagesMock } from '../../../../mocks/components/productImageViewer';
import { ProductImageViewer } from '../ProductImageViewer';
import { getArgTypes, getArgs } from '../../../tools/controlsHelper';

const storyWrapperStyles = { width: '100%', maxWidth: 630, margin: '0' };

export default {
    title: 'Components/Product Image Viewer',
    component: ProductImageViewer,
    argTypes: getArgTypes(ProductImageViewer.schema().form),
    parameters: {
        controls: {
            include: Object.keys(ProductImageViewer.schema().form)
        }
    }
};

export const Horizontal = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer
                data={defaultMock}
                settings={args}
            />
        </div>
    ),
    args: {
        ...getArgs(ProductImageViewer.schema().form),
        layout: LAYOUT_HORIZONTAL
    }
};

export const Vertical = {
    render: () => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer
                data={defaultMock}
                settings={{
                    layout: LAYOUT_VERTICAL
                }}
            />
        </div>
    ),
    parameters: {
        controls: {
            disable: true
        }
    }
};

export const WithTitles = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer
                data={defaultMock}
                settings={{
                    ...args,
                    layout: LAYOUT_TITLES
                }}
            />
        </div>
    ),
    args: {
        ...getArgs(ProductImageViewer.schema().form),
        layout: LAYOUT_TITLES
    }
};

export const CaretsOnly = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer
                data={defaultMock}
                settings={{
                    ...args,
                    layout: LAYOUT_CARETS
                }}
            />
        </div>
    ),
    args: {
        ...getArgs(ProductImageViewer.schema().form),
        layout: LAYOUT_CARETS
    }
};

export const YoutubeDemo = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer data={youtubeDemoMock} settings={args} />
        </div>
    ),
    args: getArgs(ProductImageViewer.schema().form)
};

export const YoutubeDemoOverviewImageOnly = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer data={youtubeDemoWithoutScreenshotsMock} settings={args} />
        </div>
    ),
    args: getArgs(ProductImageViewer.schema().form)
};

export const VimeoDemo = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer data={vimeoDemoMock} settings={args} />
        </div>
    ),
    args: getArgs(ProductImageViewer.schema().form)
};

export const ZoomDemo = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer
                data={zoomDemoMock}
                settings={{
                    ...args,
                    layout: LAYOUT_HORIZONTAL,
                    hasZoom: true
                }}
            />
        </div>
    ),
    args: {
        ...getArgs(ProductImageViewer.schema().form),
        layout: LAYOUT_HORIZONTAL,
        hasZoom: true
    }
};

export const WithTallImages = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer data={tallImagesMock} settings={args} />
        </div>
    ),
    args: getArgs(ProductImageViewer.schema().form)
};

export const WithSettings = {
    render: args => (
        <div style={storyWrapperStyles}>
            <ProductImageViewer data={defaultMock} settings={args} />
        </div>
    ),
    args: getArgs(ProductImageViewer.schema().form)
};
