import React from 'react';
import PropTypes from 'prop-types';
import { createNamespace } from '../../tools/namingTools';
import { menuMainItemPropTypes } from '../../constants/components/prop-types/menu';

export const renderMenuChildItem = (
    { title, link, isVisible, openInNewTab, uuid },
    n,
    childItemClassNames = {}
) => {
    const { value: subTitleText } = title;
    const { value: subTitleUrl } = link;
    const target = openInNewTab ? '_blank' : null;
    const rel = openInNewTab ? 'noopener noreferrer' : null;

    return (isVisible ? (
        <li
            {...childItemClassNames}
            key={uuid}
        >
            {subTitleUrl
                ? <a {...n('link').withTestId().props} href={subTitleUrl} target={target} rel={rel}>{subTitleText}</a>
                : title.value}
        </li>
    ) : null);
};

const LinkMenuItem = ({
    menuItem,
    namespaceString,
    mainItemClassNames,
    mainItemSubListClassNames,
    childItemClassNames
}) => {
    const n = createNamespace(namespaceString);

    const { title, link, isVisible, openInNewTab, uuid, children: subItems } = menuItem;

    const { value: titleText } = title;
    const { value: titleUrl } = link;
    const target = openInNewTab ? '_blank' : null;
    const rel = openInNewTab ? 'noopener noreferrer' : null;

    const hasSubItems = Boolean(subItems && subItems.length);

    // dont display if main item hidden AND
    // no sub items OR all sub items hidden
    if (!isVisible && (!hasSubItems || subItems.every(subItem => !subItem.isVisible))) {
        return null;
    }

    return (
        <div {...mainItemClassNames} key={uuid}>
            {titleText && (
                isVisible && (
                    <span {...n('title').withTestId().props}>
                        {titleUrl ? (
                            <a {...n('link').withTestId().props} href={titleUrl} target={target} rel={rel}>{titleText}</a>
                        ) : titleText}
                    </span>
                )
            )}
            {hasSubItems && (
                <ul {...mainItemSubListClassNames}>
                    {subItems.map(childProps => (
                        renderMenuChildItem(childProps, n, childItemClassNames)
                    ))}
                </ul>
            )}
        </div>
    );
};

LinkMenuItem.propTypes = {
    menuItem: menuMainItemPropTypes,
    namespaceString: PropTypes.string,
    mainItemClassNames: PropTypes.object,
    mainItemSubListClassNames: PropTypes.object,
    childItemClassNames: PropTypes.object
};

LinkMenuItem.defaultProps = {
    menuItem: {
        title: '',
        link: '',
        isVisible: true,
        openInNewTab: false,
        children: []
    },
    namespaceString: '',
    mainItemClassNames: {},
    mainItemSubListClassNames: {},
    childItemClassNames: {}
};

export default LinkMenuItem;
