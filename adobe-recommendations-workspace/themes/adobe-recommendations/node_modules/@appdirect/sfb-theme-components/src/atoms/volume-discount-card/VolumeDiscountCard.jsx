import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { createNamespace } from '../../tools/namingTools';
import VolumePricingModal from '../volume-pricing-modal/VolumePricingModal';
import { replacePlaceholders, lowercaseWithUpperFirst } from '../../tools/stringTools';
import { marketplaceProductDataStore } from '../../store/marketplaceProductData';
// IMPORTANT: (s)css should be imported after other atoms/components
import './styles/VolumeDiscountCard.scss';

const n = createNamespace('VolumeDiscountCard');

const VolumeDiscountCard = ({
    onClick,
    onKeyDown,
    callback,
    component,
    data,
    showVolumeDiscount,
    mockData
}) => {
    const [visible, setVisibility] = useState(false);
    const { marketplaceProductData } = marketplaceProductDataStore();
    const hasVolumePricing = !!Object.keys(marketplaceProductData).length
        && marketplaceProductData?.marketplaceProduct?.externalSource;
    // eslint-disable-next-line no-unsafe-optional-chaining
    const { title, content, information, linkName } = data?.volumeDiscountPricing;
    const { useCheckoutForSpecialPricingMessage } = data;
    const externalSource = marketplaceProductData?.marketplaceProduct?.externalSource;
    const formattedTitle = replacePlaceholders(title, { vendor: lowercaseWithUpperFirst(externalSource) });
    const formattedLinkName = replacePlaceholders(linkName, { vendor: lowercaseWithUpperFirst(externalSource) });
    const parameters = {
        isVisible: visible,
        volumePricingData: hasVolumePricing
            ? marketplaceProductData
            : mockData?.mockVolumePricing,
        data,
        formattedTitle,
        callback: callback || setVisibility
    };
    const renderComponent = () => (component
        ? <component {...parameters} />
        : <VolumePricingModal {...parameters} />
    );

    const toggleVisibility = () => {
        setVisibility(!visible);
    };

    return !useCheckoutForSpecialPricingMessage && (hasVolumePricing || showVolumeDiscount) ? (
        <>
            <div
                {...n('wrapper').props}
                onClick={onClick || toggleVisibility}
                onKeyDown={onKeyDown || toggleVisibility}
                data-testid="volumeDiscountCard"
            >
                <div {...n('info').props}>
                    <div {...n('title').props}>
                        {formattedTitle}
                    </div>
                    <div {...n('content').props}>
                        {content}
                    </div>
                </div>
                <div {...n('contentWrapper').props}>
                    <div {...n('subcontent').props}>
                        {information}
                    </div>
                    <div
                        {...n('link').props}
                    >
                        {formattedLinkName}
                    </div>
                </div>
            </div>
            {renderComponent()}
        </>
    )
        : null;
};

VolumeDiscountCard.schema = () => ({
    marketplaceData: {
        currency: 'config.currency',
        locale: 'locale',
        volumeDiscountPricing: 'application.editions.i18n.volumeDiscountPricing',
        pricingDurationEnum: 'application.editions.i18n.pricingDurationEnum',
        contractDuration: 'application.editions.i18n.contractDuration',
        units: 'application.editions.i18n.units',
        closeLabel: 'nav.primary.i18n.close',
        editionsDataStore: 'application.editions.items',
        useCheckoutForSpecialPricingMessage: 'application.summary.useCheckoutForSpecialPricingMessage'
    }
});

VolumeDiscountCard.propTypes = {
    onClick: PropTypes.func,
    onKeyDown: PropTypes.func,
    callback: PropTypes.func,
    component: PropTypes.func,
    data: PropTypes.object,
    showVolumeDiscount: PropTypes.bool,
    mockData: PropTypes.object
};

VolumeDiscountCard.defaultProps = {
    onClick: null,
    onKeyDown: null,
    callback: null,
    component: null,
    data: {},
    showVolumeDiscount: false,
    mockData: {}
};

export default VolumeDiscountCard;
